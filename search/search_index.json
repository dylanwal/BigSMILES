{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BigSMILES","text":"Warning <p>The BigSMILES package and documentation is still being built. So things may change or be incomplete.</p> <p>Please report bugs if you find them!</p> <p>This site contains the project documentation for the 'BigSMILES' project.</p> <p>BigSMILES is a structurally based line notation based on the highly successful  SMILES (simplified molecular-input line-entry system) representation. It provides extensions over regular SMILES, which can only represent molecules with given deterministic  molecular structures, and support the representation of molecules that are characterized by a distribution of  distinct molecular structures instead of a single well-defined structure. This feature is designed specifically to  reflect the stochastic nature of polymer molecules. Since polymers are macromolecules that usually have large molecular weights, the line notation is termed BigSMILES.</p>"},{"location":"bigsmiles/references/","title":"References","text":""},{"location":"bigsmiles/references/#old-bigsmiles-documentation","title":"Old BigSMILES documentation","text":"<p>Learn more about BigSMILES Notation</p>"},{"location":"bigsmiles/references/#smilessimplified-molecular-input-line-entry-system","title":"SMILES(Simplified Molecular Input Line Entry System)","text":"<ul> <li>Daylight</li> <li>openSMILES</li> <li>github</li> <li>SMILES+</li> </ul>"},{"location":"bigsmiles/references/#reaction-smiles","title":"Reaction SMILES:","text":"<ul> <li>Daylight Summer School</li> <li>Daylight SMIRKS</li> </ul>"},{"location":"bigsmiles/stereochemistry/","title":"Stereochemistry","text":""},{"location":"bigsmiles/stereochemistry/#ez","title":"E/Z","text":"<p>priority rules:</p> <p>1) Higher atomic number precedes lower.  2) Higher atomic mass precedes lower (in the case of isotopes)    * Use exact isotopic mass when an isotope is indicated, and use average atomic weight when it is not 3) 'E' precedes 'Z' 4) Chiral stereogenic units precede pseudoasymmetric stereogenic units, and these precede nonstereogenic units 5) \u201cr\u201d precedes \u201cs\u201d  6) An undifferentiated reference node has priority over any other undifferentiated node.</p>"},{"location":"bigsmiles/stereochemistry/#references","title":"References","text":"<ul> <li>Nomenclature of Organic Chemistry</li> <li>https://books.rsc.org/books/monograph/180/Nomenclature-of-Organic-Chemistry</li> <li>https://doi.org/10.1039/9781849733069</li> <li>Algorithmic Analysis of Cahn\u2013Ingold\u2013Prelog Rules of Stereochemistry: Proposals for Revised Rules and  a Guide for Machine Implementation</li> <li>https://pubs.acs.org/doi/full/10.1021/acs.jcim.8b00324</li> <li>Jmol SMILES and Jmol SMARTS: specifications and applications</li> <li>https://jcheminf.biomedcentral.com/articles/10.1186/s13321-016-0160-4</li> </ul>"},{"location":"developers/developers/","title":"Developers","text":""},{"location":"developers/developers/#goals-of-the-project","title":"Goals of the project","text":"<p>The main goal of this project is to provide a lightweight parsing and validation of any SMILES/BigSMILES string that can be the building off point for other cheminformatics.</p> <p>With that said; this package will also try to support additional representations and algorithms related to  chemiformatics as optional features (and optional dependencies).</p>"},{"location":"developers/developers/#want-to-request-a-feature","title":"Want to request a feature?","text":"<p>Submit as an <code>issue</code> and use GitHub labels <code>enhancement</code>.</p>"},{"location":"developers/developers/#want-to-develop-a-feature","title":"Want to develop a feature?","text":"<p>Help is always welcomed. Submit as an <code>issue</code> and use GitHub labels <code>enhancement</code>. We can provide guidance before you start your work!</p>"},{"location":"developers/developers/#found-a-bug-in-the-code","title":"Found a bug in the code?","text":"<p>(there are probably a few  \ud83d\ude2d  )</p> <p>Submit as an <code>issue</code> and use GitHub labels <code>bug</code>. Solutions are also welcomed (either through quick code blocks or pull requests.)</p>"},{"location":"extras/change_log/","title":"Change Log","text":""},{"location":"extras/license/","title":"License","text":""},{"location":"extras/license/#3-clause-bsd-license","title":"3 - Clause BSD License","text":"<pre><code>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n       copyright notice, this list of conditions and the following\n       disclaimer in the documentation and/or other materials provided\n       with the distribution.\n\n    * Neither the name of the Developers nor the names of any\n       contributors may be used to endorse or promote products derived\n       from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"quickstart/overview/","title":"Overview:","text":"<p>This part of the project documentation focuses on help newcomers with getting started.</p> <p> Step 1: Installation </p> <p>Installation</p> <p>To install BigSMILES use the following command:</p> <p><code>pip install bigsmiles</code></p> <p>Or go to:</p> <p>bigsmiles \u00b7 PyPI</p> <p>Or visit GitHub:</p> <p>bigsmiles \u00b7 GitHub</p> <p> Step 2: Lesson 1 </p> <p>Click 'lesson 1' on the navigation in the right sidebar.</p>"},{"location":"quickstart/quickstart/","title":"Lesson 1","text":"<p>suggested shortening of <code>import bigsmiles</code> --&gt; <code>import bigsmiles as bs</code></p> <pre><code>import bigsmiles\npolymer_string = \"CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\"\npolymer = bigsmiles.BigSMILES(polymer_string)\nprint(bigsmiles)  # \"CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\"\n</code></pre>"},{"location":"quickstart/tokenizing/","title":"Tokenizing","text":"<p>Tokenization</p> <p>Tokenization refers to the process of splitting a input (BigSMILES string) into  indivdual terms (Atoms, Bonds, Bonding Descriptors, etc.).</p>"},{"location":"quickstart/tokenizing/#text-tokenizer","title":"Text Tokenizer","text":"<p>Input: BigSMILES string</p> <p>Output: List of individual tokens as strings. </p> <pre><code>import bigsmiles\nbigsmiles_str = \"CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\"\nbigsmiles_split_str = bigsmiles.tokenize_text(bigsmiles_str)\nprint(bigsmiles_split_str)\n# output: ['C', 'C', '{', '[&gt;]', '[&lt;]', 'C', 'C', '(', 'C', ')', '[&gt;]', '[&lt;]', '}', 'C', 'C', '(', 'C', ')', '=', 'C']\n</code></pre> <p>For more information on bigsmiles.tokenize</p>"},{"location":"quickstart/tokenizing/#class-tokenizer","title":"Class Tokenizer","text":"<p>Input: BigSMILES string</p> <p>Output: List of Tokens. A <code>Token</code> has two attributes:</p> <ul> <li><code>Token.kind</code>: Tokenkind (e.g., <code>TokenKind.Atom</code> or <code>TokenKind.Bond</code>)  See TokenKind (enum) for more information </li> <li><code>Token.value</code>: string (e.g., 'C' or '[&gt;]')</li> </ul> <pre><code>import bigsmiles\nbigsmiles_str = \"CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\"\nbigsmiles_tokens = bigsmiles.tokenize(bigsmiles_str)\nprint(bigsmiles_tokens)\n# [\n# Atom: C, Atom: C, StochasticStart: {, BondDescriptor: [&gt;], BondDescriptor: [&lt;], Atom: C, Atom: C, \n# BranchStart: (, Atom: C, BranchEnd: ), BondDescriptor: [&gt;], BondDescriptor: [&lt;], StochasticEnd: }, \n# Atom: C, Atom: C, BranchStart: (, Atom: C, BranchEnd: ), Bond: =, Atom: C\n# ]\n</code></pre> <p>For more information on bigsmiles.tokenize</p>"},{"location":"quickstart/tokenizing/#atom-tokenizer","title":"Atom tokenizer","text":"<p>Input: BigSMILES string</p> <p>Output: dictionary of attributes </p> <pre><code>import bigsmiles\natom_dict = bigsmiles.tokenize_atom_symbol(\"[13C@H+:1]\")\nprint(atom_dict)\n# {'isotope': 13, 'symbol': 'C', 'stereo': '@', 'hydrogens': 1, 'charge': 1, 'class_': 1}\n</code></pre> <p>For more information on bigsmiles.tokenize_atom_symbol</p>"},{"location":"quickstart/tokenizing/#bonding-descriptor-tokenizer","title":"Bonding Descriptor Tokenizer","text":"<p>Input: Bonding Descriptor string</p> <p>Output: tuple[bond symbol, index]</p> <pre><code>import bigsmiles\nbond_descr = bigsmiles.tokenize_bonding_descriptor(\"[$1]\")\nprint(bond_descr)\n# ('$', 1)\n</code></pre> <p>For more information on  bigsmiles.tokenize_bonding_descriptor</p>"},{"location":"reference/configuration/","title":"Configuration","text":""},{"location":"reference/configuration/#colored-outputs","title":"Colored outputs","text":"<pre><code>import bigsmiles\nbigsmiles.Config.color_output = True\n</code></pre> <p>BigSMILES: (html and letex verions shown)</p> <p>CC { [&gt;] [&lt;] CC(C) [&gt;] [&lt;] } CC(C)=C</p>"},{"location":"reference/errors/","title":"Errors","text":""},{"location":"reference/errors/#bigsmiles.errors.BigSMILESError","title":"<code>bigsmiles.errors.BigSMILESError(text, error=None)</code>","text":"<p>base BigSMILES error</p>"},{"location":"reference/errors/#bigsmiles.errors.TokenizeError","title":"<code>bigsmiles.errors.TokenizeError</code>","text":"<p>raised when an error occurs tokenizing a BigSMILES string.</p>"},{"location":"reference/errors/#bigsmiles.errors.ConstructorError","title":"<code>bigsmiles.errors.ConstructorError</code>","text":"<p>raised when an error occurs during the construction of a BigSMILES string.</p>"},{"location":"reference/errors/#bigsmiles.errors.ValidationError","title":"<code>bigsmiles.errors.ValidationError</code>","text":"<p>raised when validating a SMILES/BigSMILES string is syntactically correct.</p>"},{"location":"reference/overview/","title":"Overview","text":"<p> The code is organized in to 3 main groups: </p> <p>Data Structures</p> <p>Objects that hold data.</p> <p>Examples</p> <ul> <li>Atom</li> <li>Bond</li> <li>Bonding Descriptor</li> </ul> <p>Methods</p> <p>Functions that can transform, compute, display, etc. things about the data structure.</p> <p>Examples</p> <ul> <li>Parse Tree</li> <li>Graph</li> <li>Fingerprint</li> </ul> <p>Constructor</p> <p>Functions that can be used to construct data structures.</p> <p>Examples</p> <ul> <li>add_atom()</li> <li>add_bond()</li> <li>insert_branch()</li> </ul> <p> The typical flow of data through the code is: </p> <p>flowchart LR   Constructor --&gt; Data_Structures   Data_Structures  --&gt; Methods   Note: the constructor is often called from the data_structure. Specifically, BigSMILES will pass the BigSMILES string  to the constructor to create itself.</p>"},{"location":"reference/constructor/constructor/","title":"Constructor","text":""},{"location":"reference/constructor/constructor/#exit","title":"exit","text":"<p>Warning</p> <p>This should be run at the end of any BigSMILES construction.</p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.exit_construction","title":"<code>bigsmiles.constructors.constructor.exit_construction(parent, syntax_fix=True, validation=True)</code>","text":"<p>runs several methods to fix any syntax issues and runs more extensive validation</p> PARAMETER DESCRIPTION <code>parent</code> <p>BigSMILES to be checked</p> <p> TYPE: <code>BigSMILES</code> </p> <code>syntax_fix</code> <p>True to perform syntax fixes</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>validation</code> <p>True to run validation</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"reference/constructor/constructor/#build-it-step-by-step","title":"build it step-by-step","text":""},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_atom","title":"<code>bigsmiles.constructors.constructor.add_atom(parent, symbol, isotope=None, stereo=None, hydrogens=None, charge=0, valence=None, class_=None, **kwargs)</code>","text":"<p>appends an <code>Atom</code> to the end of the <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>symbol</code> <p>symbol symbol (e.g., H, C, O, Zn)</p> <p> TYPE: <code>str</code> </p> <code>isotope</code> <p>isotope (e.g., [13C])</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>stereo</code> <p>stereochemistry [None, \"@\", \"@@\"] (None means not defined)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>hydrogens</code> <p>number of explict hydrogens  (e.g., [CH2])</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>charge</code> <p>symbol charge  (e.g., [Fe+3])</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>valence</code> <p>The capacity to form bonds with other atoms</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>class_</code> <p>index of class (e.g., [C:1] class_ = 1)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Atom</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_bond","title":"<code>bigsmiles.constructors.constructor.add_bond(parent, bond_symbol, atom1, atom2, **kwargs)</code>","text":"<p>add 'Bond' between two 'Atoms' (typically not be used directly)</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>atom1</code> <p>atom the bond starts at</p> <p> TYPE: <code>Atom | BondDescriptorAtom</code> </p> <code>atom2</code> <p>atom the bond ends at</p> <p> TYPE: <code>Atom | BondDescriptorAtom | StochasticObject | None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Bond</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_ring_by_index","title":"<code>bigsmiles.constructors.constructor.add_ring_by_index(parent, ring_id, bond_symbol, **kwargs)</code>","text":"<p>add ring by index; rings are just 'Bond'</p> <p>Warning</p> <p>This function needs to be called twice to work; once at each time the parsing hits a ring index.</p> <p>'exit_construction()' will check to confirm that there is no uncompleted rings</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>ring_id</code> <p>index of ring</p> <p> TYPE: <code>int</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Bond</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_ring_from_atoms","title":"<code>bigsmiles.constructors.constructor.add_ring_from_atoms(parent, atom1, atom2, bond_symbol='', **kwargs)</code>","text":"<p>add ring from with both 'Atoms'; rings are just 'Bond'</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>atom1</code> <p>atom the ring starts at</p> <p> TYPE: <code>Atom</code> </p> <code>atom2</code> <p>atom the ring ends at</p> <p> TYPE: <code>Atom</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>''</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Bond</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_bonding_descriptor_atom","title":"<code>bigsmiles.constructors.constructor.add_bonding_descriptor_atom(parent, descriptor, index_, bond_symbol=None, **kwargs)</code>","text":"<p>appends 'BondDescriptorAtom' to the end of the <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>descriptor</code> <p>bonding descriptor symbol [&lt;, &gt;, $]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>bonding descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the BondDescriptorAtom</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_bond_atom_pair","title":"<code>bigsmiles.constructors.constructor.add_bond_atom_pair(parent, bond_symbol, symbol, isotope=None, stereo=None, hydrogens=None, charge=0, valence=None, class_=None, kwargs_atom=None, kwargs_bond=None)</code>","text":"<p>appends a <code>Bond</code> followed by an <code>Atom</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>parent</p> <p> TYPE: <code>has_node_attr</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>symbol</code> <p>symbol symbol (e.g., H, C, O, Zn)</p> <p> TYPE: <code>str</code> </p> <code>isotope</code> <p>isotope (e.g., [13C])</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>stereo</code> <p>stereochemistry [None, \"@\", \"@@\"] (None means not defined)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>hydrogens</code> <p>number of explict hydrogens  (e.g., [CH2])</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>charge</code> <p>symbol charge  (e.g., [Fe+3])</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>valence</code> <p>The capacity to form bonds with other atoms</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>class_</code> <p>index of class (e.g., [C:1] class_ = 1)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>kwargs_atom</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Atom</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>kwargs_bond</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Bond</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_bond_bonding_descriptor_pair","title":"<code>bigsmiles.constructors.constructor.add_bond_bonding_descriptor_pair(parent, bond_symbol, descriptor, index_, kwargs_bond_descriptor=None, kwargs_bond=None)</code>","text":"<p>appends a <code>Bond</code> followed by an <code>BondingDescriptorAtom</code></p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>StochasticFragment | Branch</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>descriptor</code> <p>bonding descriptor symbol [&lt;, &gt;, $]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>bonding descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>kwargs_bond_descriptor</code> <p>any additional keyword arguments are accepted and set as additional attributes to the BondDescriptorAtom</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>kwargs_bond</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Bond</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the parent passed to it</p> <p> TYPE: <code>StochasticFragment | Branch</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.open_branch","title":"<code>bigsmiles.constructors.constructor.open_branch(parent, **kwargs)</code>","text":"<p>open branch</p> <p>Warning</p> <p>close_branch() must be called at some later point</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the Branch</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns Branch</p> <p> TYPE: <code>Branch</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.close_branch","title":"<code>bigsmiles.constructors.constructor.close_branch(parent)</code>","text":"<p>closes branch and appends it to <code>parent.parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>Branch</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns parent.parent</p> <p> TYPE: <code>has_node_attr</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.open_stochastic_object","title":"<code>bigsmiles.constructors.constructor.open_stochastic_object(parent, descriptor, index_, **kwargs)</code>","text":"<p>open <code>StochasticObject</code></p> <p>Warning</p> <p>close_stochastic_object() must be called at a later point</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>descriptor</code> <p>bonding descriptor symbol [&lt;, &gt;, $]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>bonding descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the BondDescriptorAtom</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns StochasticObject</p> <p> TYPE: <code>StochasticObject</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.open_stochastic_object_fragment","title":"<code>bigsmiles.constructors.constructor.open_stochastic_object_fragment(parent, descriptor, index_, **kwargs)</code>","text":"<p>opens <code>StochasticObject</code> and <code>StochasticFragment</code></p> <p>Warning</p> <p>close_stochastic_fragment() must be called at a later point</p> <p>close_stochastic_object() must be called at a later point</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>descriptor</code> <p>bonding descriptor symbol [&lt;, &gt;, $]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>bonding descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the BondDescriptorAtom</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.open_stochastic_object_fragment_with_bond","title":"<code>bigsmiles.constructors.constructor.open_stochastic_object_fragment_with_bond(parent, bond_symbol, descriptor, index_, **kwargs)</code>","text":"<p>opens <code>StochasticObject</code> and <code>StochasticFragment</code></p> <p>Warning</p> <p>close_stochastic_fragment() must be called at a later point</p> <p>close_stochastic_object() must be called at a later point</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>descriptor</code> <p>bonding descriptor symbol [&lt;, &gt;, $]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>bonding descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes to the BondDescriptorAtom</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.close_stochastic_object","title":"<code>bigsmiles.constructors.constructor.close_stochastic_object(parent, descriptor, index_, bond_symbol)</code>","text":"<p>closes <code>StochasticObject</code></p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>StochasticObject</code> </p> <code>descriptor</code> <p>bonding descriptor symbol [&lt;, &gt;, $]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>bonding descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns parent.parent</p> <p> TYPE: <code>has_node_attr</code> </p> RAISES DESCRIPTION <code>ConstructorError</code> <p>Error closing StochasticObject. Possible issues:</p> <ul> <li>Closing a StochasticObject with another intermediate node started.</li> <li>No starting StochasticObject symbol.</li> </ul>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.open_stochastic_fragment","title":"<code>bigsmiles.constructors.constructor.open_stochastic_fragment(parent)</code>","text":"<p>open <code>StochasticFragment</code></p> <p>Warning</p> <p>close_stochastic_fragment() must be called at a later point</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>StochasticObject</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.close_open_stochastic_fragment","title":"<code>bigsmiles.constructors.constructor.close_open_stochastic_fragment(parent)</code>","text":"<p>closes <code>StochasticFragment</code> and opens a new <code>StochasticFragment</code></p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>StochasticFragment</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns a new StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.close_stochastic_fragment","title":"<code>bigsmiles.constructors.constructor.close_stochastic_fragment(parent)</code>","text":"PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>StochasticFragment</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns parent.parent</p> <p> TYPE: <code>StochasticObject</code> </p>"},{"location":"reference/constructor/constructor/#build-it-in-chunks","title":"build it in chunks","text":""},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.append_bigsmiles_fragment","title":"<code>bigsmiles.constructors.constructor.append_bigsmiles_fragment(parent, bigsmiles_, bond_symbol, **kwargs)</code>","text":"PARAMETER DESCRIPTION <code>parent</code> <code>bigsmiles_</code> <p> TYPE: <code>BigSMILES</code> </p> <code>bond_symbol</code> <p> TYPE: <code>str | None</code> </p> <code>kwargs</code> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.attach_bigsmiles_branch","title":"<code>bigsmiles.constructors.constructor.attach_bigsmiles_branch(parent, bond_symbol, bigsmiles_, index_, kwargs_bond=None, kwargs_branch=None)</code>","text":"PARAMETER DESCRIPTION <code>parent</code> <code>bond_symbol</code> <p> TYPE: <code>str | None | None</code> </p> <code>bigsmiles_</code> <p> TYPE: <code>BigSMILES</code> </p> <code>index_</code> <p> TYPE: <code>int</code> </p> <code>kwargs_bond</code> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>kwargs_branch</code> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.insert_atom_and_bond","title":"<code>bigsmiles.constructors.constructor.insert_atom_and_bond(parent, prior_atom, bond_symbol, element, isotope=None, stereo='', hydrogens=0, charge=0, valance=None, class_=None, kwargs_atom=None, kwargs_bond=None)</code>","text":"PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>prior_atom</code> <p> TYPE: <code>Atom | BondDescriptorAtom | Branch | StochasticObject | None</code> </p> <code>bond_symbol</code> <p> TYPE: <code>str | None</code> </p> <code>element</code> <p> TYPE: <code>str</code> </p> <code>isotope</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>stereo</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>hydrogens</code> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>charge</code> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>valance</code> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>class_</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>kwargs_atom</code> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>kwargs_bond</code> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.insert_atom_into_bond","title":"<code>bigsmiles.constructors.constructor.insert_atom_into_bond(parent, bond_to_insert_into, element, isotope=None, stereo='', hydrogens=0, charge=0, valance=None, class_=None, kwargs_atom=None)</code>","text":"PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>bond_to_insert_into</code> <p> TYPE: <code>Bond</code> </p> <code>element</code> <p> TYPE: <code>str</code> </p> <code>isotope</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>stereo</code> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>hydrogens</code> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>charge</code> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>valance</code> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>class_</code> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>kwargs_atom</code> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_bonding_descriptor_bond_via_index","title":"<code>bigsmiles.constructors.constructor.add_bonding_descriptor_bond_via_index(parent, bond_symbol, descriptor, index_, prior_atom, kwargs_bond=None)</code>","text":"PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>StochasticFragment</code> </p> <code>bond_symbol</code> <p> TYPE: <code>str | None</code> </p> <code>descriptor</code> <p> TYPE: <code>str</code> </p> <code>index_</code> <p> TYPE: <code>int</code> </p> <code>prior_atom</code> <p> TYPE: <code>Atom</code> </p> <code>kwargs_bond</code> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_stochastic_fragment","title":"<code>bigsmiles.constructors.constructor.add_stochastic_fragment(stoch_object, stoch_fragment)</code>","text":"PARAMETER DESCRIPTION <code>stoch_object</code> <p> TYPE: <code>StochasticObject</code> </p> <code>stoch_fragment</code> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor/#bigsmiles.constructors.constructor.add_bigsmiles_as_stochastic_fragment","title":"<code>bigsmiles.constructors.constructor.add_bigsmiles_as_stochastic_fragment(stoch_obj, bigsmiles_)</code>","text":"PARAMETER DESCRIPTION <code>stoch_obj</code> <p> TYPE: <code>StochasticObject</code> </p> <code>bigsmiles_</code> <p> TYPE: <code>BigSMILES</code> </p>"},{"location":"reference/constructor/constructor_reaction/","title":"Constructor(reaction)","text":""},{"location":"reference/constructor/constructor_reaction/#bigsmiles.constructors.constructor_reaction.parse_reaction","title":"<code>bigsmiles.constructors.constructor_reaction.parse_reaction(text)</code>","text":"<p>Main entry point to parsing reaction SMILES.</p> <p>Regular Expression Pattern</p> <p>pattern: r\"(?&lt;![)(&gt;&gt;|&gt;)\"</p> PARAMETER DESCRIPTION <code>text</code> <p>reaction BigSMILES string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>reactants</code> <p>reactants</p> <p> TYPE: <code>list[BigSMILES]</code> </p> <code>agents</code> <p>agents</p> <p> TYPE: <code>list[BigSMILES]</code> </p> <code>products</code> <p>products</p> <p> TYPE: <code>list[BigSMILES]</code> </p>"},{"location":"reference/constructor/constructor_reaction/#bigsmiles.constructors.constructor_reaction.split_chemical","title":"<code>bigsmiles.constructors.constructor_reaction.split_chemical(bigsmiles_)</code>","text":"<p>Tries to split a BigSMILES at disconnects '.' if it thinks they are different molecules/polymers.</p> <p>If it can't determine, it won't do anything.</p> PARAMETER DESCRIPTION <code>bigsmiles_</code> <p>bigsmiles which may or may not be made of multiple molecules/polymers seperated by disconnect notation '.'</p> <p> TYPE: <code>BigSMILES</code> </p> RETURNS DESCRIPTION <code>results</code> <p>list of BigSMILES of individual molecules/polymers</p> <p> TYPE: <code>list[BigSMILES]</code> </p>"},{"location":"reference/constructor/constructor_str/","title":"Constructor(strings)","text":""},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.add_atom_str","title":"<code>bigsmiles.constructors.constructor_str.add_atom_str(parent, symbol)</code>","text":"<p>appends an <code>Atom</code> to the end of the <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>parent Atom will be added to</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>symbol</code> <p>atom symbol - will be parsed into symbol, isotope, charge, etc.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns same parent that was provided</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.add_bonding_descriptor_atom_str","title":"<code>bigsmiles.constructors.constructor_str.add_bonding_descriptor_atom_str(parent, bd_symbol, bond_symbol=None)</code>","text":"<p>appends an <code>BondDescriptorAtom</code> to the end of the <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>parent that the BondDescriptorAtom will be added to</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bd_symbol</code> <p>bonding descriptor symbol - will be parsed into symbol, index</p> <p> TYPE: <code>str</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns same parent that was provided</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.add_bond_atom_pair_str","title":"<code>bigsmiles.constructors.constructor_str.add_bond_atom_pair_str(parent, bond_symbol, atom_symbol)</code>","text":"<p>appends an <code>Bond</code> followed by an 'Atom' to the end of the <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>parent that the Bond and Atom will be added to</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>atom_symbol</code> <p>atom symbol - will be parsed into symbol, isotope, charge, etc.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns same parent that was provided</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.add_bond_bonding_descriptor_pair_str","title":"<code>bigsmiles.constructors.constructor_str.add_bond_bonding_descriptor_pair_str(parent, bond_symbol, bd_symbol)</code>","text":"<p>appends an <code>Bond</code> followed by an 'BondDescriptorAtom' to the end of the <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>parent that the Bond and BondDescriptorAtom will be added to</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> <code>bd_symbol</code> <p>bonding descriptor symbol - will be parsed into symbol, index</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns same parent that was provided</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.open_stochastic_object_fragment_str","title":"<code>bigsmiles.constructors.constructor_str.open_stochastic_object_fragment_str(parent, bd_symbol)</code>","text":"<p>opens 'StochasticObject' followed by opening 'StochasticFragment'</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bd_symbol</code> <p>bonding descriptor symbol - will be parsed into symbol, index</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns parent is stochastic fragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.open_stochastic_object_str","title":"<code>bigsmiles.constructors.constructor_str.open_stochastic_object_str(parent, bd_symbol)</code>","text":"<p>opens 'StochasticObject'</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bd_symbol</code> <p>bonding descriptor symbol - will be parsed into symbol, index</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns parent is stochastic object</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.open_stochastic_object_fragment_with_bond_str","title":"<code>bigsmiles.constructors.constructor_str.open_stochastic_object_fragment_with_bond_str(parent, bond_symbol, bd_symbol)</code>","text":"<p>opens 'StochasticObject' followed by opening 'StochasticFragment'</p> PARAMETER DESCRIPTION <code>parent</code> <p>parent of StochasticObject</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bd_symbol</code> <p>bonding descriptor symbol - will be parsed into symbol, index</p> <p> TYPE: <code>str</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns parent is StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.close_stochastic_object_str","title":"<code>bigsmiles.constructors.constructor_str.close_stochastic_object_str(parent, bd_symbol, bond_symbol)</code>","text":"<p>closes 'StochasticObject' and append it to <code>parent</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>parent of StochasticObject</p> <p> TYPE: <code>BigSMILES | Branch | StochasticObject | StochasticFragment</code> </p> <code>bd_symbol</code> <p>bonding descriptor symbol (right side) - will be parsed into symbol, index</p> <p> TYPE: <code>str</code> </p> <code>bond_symbol</code> <p>bond symbol (\"\", \"=\", \"#\", etc.)</p> <p> TYPE: <code>str | None</code> </p> RETURNS DESCRIPTION <code>parent.parent</code> <p>returns parent of StochasticObject</p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.open_stochastic_fragment","title":"<code>bigsmiles.constructors.constructor_str.open_stochastic_fragment(parent)</code>","text":"<p>opens 'StochasticFragment'</p> PARAMETER DESCRIPTION <code>parent</code> <p>parent of StochasticFragment</p> <p> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the freshly opened StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.close_open_stochastic_fragment_str","title":"<code>bigsmiles.constructors.constructor_str.close_open_stochastic_fragment_str(parent)</code>","text":"<p>closes <code>StochasticFragment</code> and appends it to 'parent.parent' and opens a new <code>StochasticFragment</code></p> PARAMETER DESCRIPTION <code>parent</code> <p>StochasticFragment to be closed</p> <p> </p> RETURNS DESCRIPTION <code>parent</code> <p>returns the freshly opened StochasticFragment</p> <p> TYPE: <code>StochasticFragment</code> </p>"},{"location":"reference/constructor/constructor_str/#bigsmiles.constructors.constructor_str.close_stochastic_fragment_str","title":"<code>bigsmiles.constructors.constructor_str.close_stochastic_fragment_str(parent)</code>","text":"<p>closes <code>StochasticFragment</code> and appends it to 'parent.parent'</p> PARAMETER DESCRIPTION <code>parent</code> <p>StochasticFragment to be closed</p> <p> TYPE: <code>StochasticFragment</code> </p> RETURNS DESCRIPTION <code>parent.parent</code> <p>returns the parent.parent</p>"},{"location":"reference/constructor/constructor_tokens/","title":"Constructor(tokens)","text":""},{"location":"reference/constructor/constructor_tokens/#bigsmiles.constructors.constructor_tokens.parse_bigsmiles_str","title":"<code>bigsmiles.constructors.constructor_tokens.parse_bigsmiles_str(input_text, bigsmiles)</code>","text":"<p>Main function that turns BigSMILES string tokens then into a BigSMILES object.</p> PARAMETER DESCRIPTION <code>input_text</code> <p>BigSMILES string</p> <p> TYPE: <code>str</code> </p> <code>bigsmiles</code> <p>this BigSMILES will be built up</p> <p> TYPE: <code>BigSMILES</code> </p>"},{"location":"reference/constructor/constructor_tokens/#bigsmiles.constructors.constructor_tokens.tokens_to_bigsmiles","title":"<code>bigsmiles.constructors.constructor_tokens.tokens_to_bigsmiles(parent, tokens)</code>","text":"<p>Main loop for converting tokens into BigSMILES objects.</p> PARAMETER DESCRIPTION <code>parent</code> <p> TYPE: <code>has_node_attr</code> </p> <code>tokens</code> <p>BigSMILES tokens</p> <p> TYPE: <code>list[Token]</code> </p>"},{"location":"reference/constructor/overview/","title":"Overview","text":"<p>Constructors are used to build BigSMILES objects. There are three types of the constructor available:</p> <p>Constructor</p> <p>Base constructor that requires full parse information.</p> <p>There are two approaches to building a BigSMILES object:</p> <ul> <li> <p>build it step-by-step</p> <ol> <li>open branch </li> <li>add atoms </li> <li>close branch</li> </ol> </li> <li> <p>build it in chunks</p> <ol> <li>build the branch in a separate BigSMILES object </li> <li>attach the branch at a specified position</li> </ol> </li> </ul> <p>Examples</p> <p><code>add_atom(parent, symbol, isotope, stereo, hydrogens, charge, valence, class_, kwargs)</code></p> <p>Constructor String</p> <p>Wraps several of the base constructor constructors. Performs parsing of string inputs before passing values to  the base constructor functions.</p> <p>Methods are appended with '_str' to denote the methods that accept strings.</p> <p>Examples</p> <p><code>add_atom(parent, symbol_str, kwargs)</code></p> <p>Constructor Tokens</p> <p>Converts a list[Tokens] into a BigSMILES leveraging the 'constructor string'. These function control more of  the flow of constructing a BigSMILES; i.e., knowing when to call what constructor function given the situation.</p> <p>Example</p> <p>\"C(C)C\" --&gt; [Token(TokenKind.Atom, \"C\"), Token(TokenKind.BranchStart, \"(\"), Token(TokenKind.Atom, \"C\"), Token(TokenKind.BranchEnd, \")\"), Token(TokenKind.Atom, \"C\")]</p> <p>\"[13C@H+:1]\" --&gt; {\"symbol\": \"C\", \"isotope\": 13, \"stereo\": \"@\", \"hydrogens\": 1, \"charge\": 1, \"class_\": 1}</p>"},{"location":"reference/constructor/overview/#tokenizer","title":"Tokenizer","text":"<p>The tokenizer receives BigSMILES strings, Atom strings, or Bonding Descriptor strings and breaks it up into  the individual tokens or parses in to a dictionary of distinct values. </p>"},{"location":"reference/constructor/overview/#reaction","title":"Reaction","text":"<p>The reaction tokenizer parses and tokenized the reaction string.  Molecules are constructed via <code>BigSMILES</code> --&gt; <code>Constructor Tokens</code>.</p>"},{"location":"reference/constructor/tokenizer/","title":"Tokenizer","text":""},{"location":"reference/constructor/tokenizer/#regular-expression-patterns","title":"Regular Expression Patterns","text":"<p>Tokenization is mainly done through regular expression patterns.</p> <p>Regular expression Patterns</p> <p>Bond = '-|=|#|$'</p> <p>Atom = 'S|P|O|N|I|F|Cl|C|Br|B'</p> <p>Aromatic = 'o|c|n|p|s|b'</p> <p>AtomExtend = r'(?:\\[)(?P[\\d]{1,3})? (?Po|c|n|p|s|b|Zr|Zn|Yb|Y|Xe|W|V|U|Ts|Tm|Tl|Ti|Th|Te|Tc|Tb|Ta|Sr |Sn|Sm|Si|Sg|Se|Sc|Sb|S|Ru|Rn|Rh|Rg|Rf|Re|Rb|Ra|Pu|Pt|Pr|Po|Pm|Pd|Pb|Pa|P|Os|Og|O|Np|No|Ni|Nh|Ne|Nd|Nb|Na|N|Mt|Mo|Mn|Mg |Md|Mc|Lv|Lu|Lr|Li|La|Kr|K|Ir|In|I|Hs|Ho|Hg|Hf|He|H|Ge|Gd|Ga|Fr|Fm|Fl|Fe|F|Eu|Es|Er|Dy|Ds|Db|Cu|Cs|Cr|Co|Cn|Cm|Cl|Cf|Ce |Cd|Ca|C|Br|Bk|Bi|Bh|Be|Ba|B|Au|At|As|Ar|Am|Al|Ag|Ac) (?P@{1,2})?(?PH[\\d]?)?(?P[-|\\+]{1,3}[\\d]?)?(?P:\\d{1,3})?(?:\\])' <p>BranchStart = r'('</p> <p>BranchEnd = r')'</p> <p>Ring = r'[\\d]{1}'</p> <p>Ring2 = r'%[\\d]{2}'</p> <p>BondEZ = r'/|\\'</p> <p>Disconnected = r\".\"</p> <p>BondDescriptorLadder = r\"[$&lt;&gt;[$&lt;&gt;?][\\d]?]\"</p> <p>BondDescriptor = r\"[$&lt;&gt;?[\\d]?]\"</p> <p>StochasticSeperator = r\",|;\"</p> <p>StochasticStart = r'{'</p> <p>StochasticEnd = r'}'</p> <p>ImplictEndGroup = r'[]'</p> <p>Rxn = r'&gt;&gt;|&gt;'</p>"},{"location":"reference/constructor/tokenizer/#atom-tokenizer","title":"Atom tokenizer","text":""},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.tokenize_atom_symbol","title":"<code>bigsmiles.constructors.tokenizer.tokenize_atom_symbol(symbol)</code>","text":"<p>convert atom symbol into a dictionary of the following values:</p> <ul> <li>symbol</li> <li>isotope (default: None)</li> <li>stereo  (default: None)</li> <li>hydrogens  (default: None)</li> <li>charge  (default: 0)</li> <li>class_  (default: None)</li> </ul> PARAMETER DESCRIPTION <code>symbol</code> <p>atom string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>result</code> <p>{\"symbol\": str, \"isotope\": int, \"stereo\": str, \"hydrogens\": int, \"charge\": int, \"class_\": int}</p> <p> TYPE: <code>dict[str</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokenize_atom_symbol(\"[13C@H+:1]\")\n{\"symbol\": \"C\", \"isotope\": 13, \"stereo\": \"@\", \"hydrogens\": 1, \"charge\": 1, \"class_\": 1}\n</code></pre>"},{"location":"reference/constructor/tokenizer/#bonding-descriptor-tokenizer","title":"Bonding Descriptor Tokenizer","text":""},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.tokenize_bonding_descriptor","title":"<code>bigsmiles.constructors.tokenizer.tokenize_bonding_descriptor(symbol)</code>","text":"<p>convert bonding descriptor symbol into the following values:</p> <ul> <li>symbol</li> <li>index</li> </ul> PARAMETER DESCRIPTION <code>symbol</code> <p>bonding_descriptor string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>result</code> <p>[symbol, index]</p> <p> TYPE: <code>tuple[str, int]</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokenize_atom_symbol(\"[$1]\")\n[\"$\", 1]\n</code></pre>"},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.tokenize_bonding_descriptor--notes","title":"Notes","text":"<ul> <li>default bonding descriptor index = 1</li> </ul>"},{"location":"reference/constructor/tokenizer/#bigsmiles-tokenizer","title":"BigSMILES Tokenizer","text":"<p>The tokenizer leverage python's regular expression to identify and label valid BigSMILE tokens.</p>"},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.tokenize_text","title":"<code>bigsmiles.constructors.tokenizer.tokenize_text(text)</code>","text":"<p>tokenizes a bigSMILES string into a list of strings</p> PARAMETER DESCRIPTION <code>text</code> <p>BigSMILES string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>result</code> <p>A list of strings, one for each token</p> <p> TYPE: <code>list[str]</code> </p> RAISES DESCRIPTION <code>TokenizeError</code> <p>invalid symbol detected</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokenize_text(\"CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\")\n['C', 'C', '{', '[&gt;]', '[&lt;]', 'C', 'C', '(', 'C', ')', '[&gt;]', '[&lt;]', '}', 'C', 'C', '(', 'C', ')', '=', 'C']\n</code></pre>"},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.tokenize","title":"<code>bigsmiles.constructors.tokenizer.tokenize(text)</code>","text":"<p>tokenizes a bigSMILES string into a list of <code>Token</code> objects.</p> PARAMETER DESCRIPTION <code>text</code> <p>BigSMILES string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>result</code> <p>BigSMILES as a token list</p> <p> TYPE: <code>list[Token]</code> </p> RAISES DESCRIPTION <code>TokenizeError</code> <p>invalid symbol detected</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; tokenize(\"C(C)C\")\n[Token(TokenKind.Atom, \"C\"), Token(TokenKind.BranchStart, \"(\"), Token(TokenKind.Atom, \"C\"),\nToken(TokenKind.BranchEnd, \")\"), Token(TokenKind.Atom, \"C\")]\n</code></pre>"},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.Token","title":"<code>bigsmiles.constructors.tokenizer.Token(kind, value)</code>","text":"<p>token; what a BigSMILES string gets broken up into</p> PARAMETER DESCRIPTION <code>kind</code> <p>token kind</p> <p> TYPE: <code>TokenKind</code> </p> <code>value</code> <p>token text</p> <p> TYPE: <code>str</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Token(TokenKind.AtomExtend, \"[13CH2]\")\n</code></pre>"},{"location":"reference/constructor/tokenizer/#bigsmiles.constructors.tokenizer.TokenKind","title":"<code>bigsmiles.constructors.tokenizer.TokenKind</code>","text":"<p>Enum</p> <p>the kind of tokens that will be extracted from BigSMILES string</p> ATTRIBUTE DESCRIPTION <code>Bond</code> <p> </p> <code>Atom</code> <p> </p> <code>Aromatic</code> <p> </p> <code>AtomExtend</code> <p> </p> <code>BranchStart</code> <p> </p> <code>BranchEnd</code> <p> </p> <code>Ring</code> <p> </p> <code>Ring2</code> <p> </p> <code>BondEZ</code> <p> </p> <code>Disconnected</code> <p> </p> <code>Rxn</code> <p> </p> <code>BondDescriptor</code> <p> </p> <code>StochasticSeperator</code> <p> </p> <code>StochasticStart</code> <p> </p> <code>StochasticEnd</code> <p> </p> <code>ImplictEndGroup</code> <p> </p> <code>BondDescriptorLadder</code> <p> </p>"},{"location":"reference/data_structure/Atom/","title":"Atom","text":""},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom","title":"<code>bigsmiles.data_structures.bigsmiles.Atom(id_, symbol, isotope=None, stereo=None, hydrogens=None, charge=0, valence=None, class_=None, parent=None, **kwargs)</code>","text":"<p>this class represents an atom</p> ATTRIBUTE DESCRIPTION <code>id_</code> <p>id of atom (id is limited to atoms). Range: [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>symbol</code> <p>symbol symbol (e.g., H, C, O, Zn)</p> <p> TYPE: <code>str</code> </p> <code>isotope</code> <p>isotope (e.g., [13C])</p> <p> TYPE: <code>int | None</code> </p> <code>stereo</code> <p>stereochemistry [None, \"@\", \"@@\"] (None means not defined)</p> <p> TYPE: <code>str | None</code> </p> <code>hydrogens</code> <p>number of explict hydrogens  (e.g., [CH2])</p> <p> TYPE: <code>int | None</code> </p> <code>charge</code> <p>symbol charge  (e.g., [Fe+3])</p> <p> TYPE: <code>int</code> </p> <code>valence</code> <p>The capacity to form bonds with other atoms</p> <p> TYPE: <code>int</code> </p> <code>class_</code> <p>index of class (e.g., [C:1] class_ = 1)</p> <p> TYPE: <code>int | None</code> </p> <code>parent</code> <p>the owner of the atom</p> <p> TYPE: <code>BigSMILES | Branch | StochasticFragment | None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> </p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.bond_capacity","title":"<code>bond_capacity: float</code>  <code>property</code>","text":"<p>total capacity of the atom account for charge</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.bonds","title":"<code>bonds: list[Bond]</code>  <code>property</code> <code>writable</code>","text":"<p>list of bonds (excludes implicit hydrogens)</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.bonds_available","title":"<code>bonds_available: float</code>  <code>property</code>","text":"<p>number bonds that remain open for bonding</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.full_valence","title":"<code>full_valence: bool</code>  <code>property</code>","text":"<p>returns true if the atom valence is full</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.implicit_hydrogens","title":"<code>implicit_hydrogens: float</code>  <code>property</code>","text":"<p>number of implicit hydrogens. (zero if explict hydrogens have been specified)</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.number_of_bonds","title":"<code>number_of_bonds: float</code>  <code>property</code>","text":"<p>number of bonds already formed (not including implicit hydrogens; but including explicit hydrogens)</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.ring_indexes","title":"<code>ring_indexes: list[int]</code>  <code>property</code>","text":"<p>list of ring index</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is based on the following parameters:</p> <ul> <li>id_</li> <li>symbol</li> <li>isotope</li> <li>stereo</li> <li>hydrogens</li> <li>charge</li> <li>valence</li> <li>aromatic</li> <li>bonds ~ bond.id_</li> </ul>"},{"location":"reference/data_structure/Atom/#bigsmiles.data_structures.bigsmiles.Atom.delete_bond","title":"<code>delete_bond(delete_bond)</code>","text":"<p>delete bond or bonds</p> PARAMETER DESCRIPTION <code>delete_bond</code> <p> TYPE: <code>Bond | list[Bond]</code> </p>"},{"location":"reference/data_structure/BigSMILES/","title":"BigSMILES","text":""},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES","title":"<code>bigsmiles.data_structures.bigsmiles.BigSMILES(text=None, **kwargs)</code>","text":"<p>this class is used to represent a BigSMILES.</p> <p>BigSMILES is a superset of SMILES; so any this class handles SMILES as well</p> <p>Examples:</p> <p>bigsmiles(\"C1CCCCC1\")</p> <p>bigsmiles(\"CC(CC){&gt;CC(c1ccccc1)&gt;}[H]\")</p> PARAMETER DESCRIPTION <code>text</code> <p>BigSMILES or SMILES string. String will be processed automatically. (pass 'None' if using 'constructor')</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.contains_stochastic_object","title":"<code>contains_stochastic_object: bool</code>  <code>property</code>","text":"<p>returns True if a stochastic object is present in the BigSMILES (anywhere)</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.has_disconnect","title":"<code>has_disconnect: bool</code>  <code>property</code>","text":"<p>returns True if '.' (disconnect symbol) is present in the BigSMILES (anywhere)</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.in_stochastic_object","title":"<code>in_stochastic_object: bool</code>  <code>property</code>","text":"<p>returns False as BigSMILES is always a root node and can't be contained in anything</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>root will return itself as BigSMILES object is always the root node</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.__bool__","title":"<code>__bool__()</code>","text":"<p>returns True if BigSMILES has nodes</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is determining all nodes and rings are equal</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.__getitem__","title":"<code>__getitem__(obj)</code>","text":"<p>get items by node index or slice</p>"},{"location":"reference/data_structure/BigSMILES/#bigsmiles.data_structures.bigsmiles.BigSMILES.__iter__","title":"<code>__iter__()</code>","text":"<p>iterator over nodes</p>"},{"location":"reference/data_structure/Bond/","title":"Bond","text":""},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond","title":"<code>bigsmiles.data_structures.bigsmiles.Bond(id_, symbol, atom1, atom2=None, ring_id=None, parent=None, **kwargs)</code>","text":"<p>this class represents a bond</p> PARAMETER DESCRIPTION <code>id_</code> <p>id of bond (id is limited to bonds). Range: [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>symbol</code> <p>bond symbol (e.g. '', '=', '#')</p> <p> TYPE: <code>str</code> </p> <code>atom1</code> <p>atom that the bond starts at</p> <p> TYPE: <code>Atom | BondDescriptorAtom | StochasticObject</code> </p> <code>atom2</code> <p>atom that the bond ends at</p> <p> TYPE: <code>Atom | BondDescriptorAtom | StochasticObject | None</code> DEFAULT: <code>None</code> </p> <code>ring_id</code> <p>if the bond is closing a ring, this is the index for that ring</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>parent</code> <p>the owner of the bond</p> <p> TYPE: <code>BigSMILES | Branch | StochasticFragment | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.aromatic","title":"<code>aromatic: bool</code>  <code>property</code>","text":"<p>Limited accuracy</p>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.bond_order","title":"<code>bond_order: int</code>  <code>property</code> <code>writable</code>","text":"<p>number of covalent bonds represented</p>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is based on the following parameters:</p> <ul> <li>id_</li> <li>symbol</li> <li>ring_id</li> <li>atom1.id_</li> <li>atom2.id_</li> </ul>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.__iter__","title":"<code>__iter__()</code>","text":"<p>iterates over Atoms</p>"},{"location":"reference/data_structure/Bond/#bigsmiles.data_structures.bigsmiles.Bond.delete","title":"<code>delete()</code>","text":"<p>deletes bond and removes it from atoms and root</p>"},{"location":"reference/data_structure/Bond_descriptor/","title":"Bond Descriptor","text":""},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor","title":"<code>bigsmiles.data_structures.bigsmiles.BondDescriptor(parent, descriptor, index_, bond_symbol, **kwargs)</code>","text":"<p>this class represents a bonding descriptor</p> PARAMETER DESCRIPTION <code>parent</code> <p>the owner of the bonding descriptor</p> <p> TYPE: <code>StochasticObject</code> </p> <code>descriptor</code> <p>descriptor symbol [$, &gt;, &lt;]</p> <p> TYPE: <code>str</code> </p> <code>index_</code> <p>descriptor index [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>bond_symbol</code> <p>bond symbol</p> <p> TYPE: <code>str | None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.aromatic","title":"<code>aromatic: bool</code>  <code>property</code>","text":"<p>limited accuracy</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.bond_order","title":"<code>bond_order: int | None</code>  <code>property</code>","text":"<p>number of covalent bonds represented</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.implicit","title":"<code>implicit: bool</code>  <code>property</code>","text":"<p>returns true is it is an implicit bonding descriptor</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.instances","title":"<code>instances: list[BondDescriptorAtom]</code>  <code>property</code> <code>writable</code>","text":"<p>list of BondDescriptorAtom that are based on this bonding descriptor</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.symbol","title":"<code>symbol: str</code>  <code>property</code>","text":"<p>descriptor + index</p>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is based on the following parameters:</p> <ul> <li>descriptor</li> <li>index_</li> <li>bond_symbol</li> </ul>"},{"location":"reference/data_structure/Bond_descriptor/#bigsmiles.data_structures.bigsmiles.BondDescriptor.is_pair","title":"<code>is_pair(bd)</code>","text":"<p>Returns true if symbols are &lt;&gt; and index match.</p>"},{"location":"reference/data_structure/Bond_descriptor_atom/","title":"Bond Descriptor Atom","text":""},{"location":"reference/data_structure/Bond_descriptor_atom/#bigsmiles.data_structures.bigsmiles.BondDescriptorAtom","title":"<code>bigsmiles.data_structures.bigsmiles.BondDescriptorAtom(id_, bond_descriptor, parent=None, **kwargs)</code>","text":"<p>this class represents a bonding descriptor and has the ability to bond it should be thought of as an atom with only on bonding site that can be any bond (single, double triple)</p> PARAMETER DESCRIPTION <code>id_</code> <p>id of bonding descriptor atom (id is limited to bonding descriptor atoms). Range: [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>bond_descriptor</code> <p>bonding descriptor that this atom represents</p> <p> TYPE: <code>BondDescriptor</code> </p> <code>parent</code> <p>the owner of the bonding descriptor atom</p> <p> TYPE: <code>BigSMILES | Branch | StochasticFragment | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Bond_descriptor_atom/#bigsmiles.data_structures.bigsmiles.BondDescriptorAtom.aromatic","title":"<code>aromatic: bool</code>  <code>property</code>","text":"<p>limited accuracy</p>"},{"location":"reference/data_structure/Bond_descriptor_atom/#bigsmiles.data_structures.bigsmiles.BondDescriptorAtom.bond","title":"<code>bond: Bond</code>  <code>property</code> <code>writable</code>","text":"<p>bond to bonding descriptor atom</p>"},{"location":"reference/data_structure/Bond_descriptor_atom/#bigsmiles.data_structures.bigsmiles.BondDescriptorAtom.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Bond_descriptor_atom/#bigsmiles.data_structures.bigsmiles.BondDescriptorAtom.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Bond_descriptor_atom/#bigsmiles.data_structures.bigsmiles.BondDescriptorAtom.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is based on the following parameters:</p> <ul> <li>id_</li> <li>descriptor</li> <li>bond.id_</li> </ul>"},{"location":"reference/data_structure/Branch/","title":"Branch","text":""},{"location":"reference/data_structure/Branch/#bigsmiles.data_structures.bigsmiles.Branch","title":"<code>bigsmiles.data_structures.bigsmiles.Branch(id_, parent, **kwargs)</code>","text":"<p>this class represents a branch</p> PARAMETER DESCRIPTION <code>id_</code> <p>id of bond (id is limited to bonds). Range: [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>parent</code> <p>owner of the branch</p> <p> TYPE: <code>BigSMILES | StochasticFragment | Branch</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Branch/#bigsmiles.data_structures.bigsmiles.Branch.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Branch/#bigsmiles.data_structures.bigsmiles.Branch.in_stochastic_object","title":"<code>in_stochastic_object: bool</code>  <code>property</code>","text":"<p>returns that if on the tree up to the root there is a stochastic object parent</p>"},{"location":"reference/data_structure/Branch/#bigsmiles.data_structures.bigsmiles.Branch.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Branch/#bigsmiles.data_structures.bigsmiles.Branch.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is determining all nodes and rings are equal</p>"},{"location":"reference/data_structure/Reaction/","title":"Reaction","text":""},{"location":"reference/data_structure/Reaction/#bigsmiles.data_structures.reaction.Reaction","title":"<code>bigsmiles.data_structures.reaction.Reaction(text=None, **kwargs)</code>","text":"<p>data structure for reaction BigSMILES</p> <p>Accepted patterns</p> <ul> <li>reactant '&gt;' agent '&gt;' product</li> <li>reactant '&gt;&gt;' product</li> <li>reactant.reactant&gt;&gt;product.product</li> <li>reactant,reactant&gt;&gt;product,product (comma supported for easier parsing)</li> </ul> <p>Definitions</p> <p>reactants: materials that contributing one or more atoms to the product</p> <p>agents: materials that don't contribute any atoms to the product or receive atoms from the reactant (catalysts, solvents)</p> <p>product: output of reactions. all atoms should have come from the reactants</p> PARAMETER DESCRIPTION <code>text</code> <p>Reaction BigSMILES string</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Stochastic_fragment/","title":"Stochastic Fragment","text":""},{"location":"reference/data_structure/Stochastic_fragment/#bigsmiles.data_structures.bigsmiles.StochasticFragment","title":"<code>bigsmiles.data_structures.bigsmiles.StochasticFragment(id_, parent, **kwargs)</code>","text":"<p>this class represents a stochastic fragment.</p> <p>stochastic fragments are only found within stochastic objects</p> PARAMETER DESCRIPTION <code>id_</code> <p>id of bond (id is limited to bonds). Range: [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>parent</code> <p> TYPE: <code>StochasticObject</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Stochastic_fragment/#bigsmiles.data_structures.bigsmiles.StochasticFragment.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Stochastic_fragment/#bigsmiles.data_structures.bigsmiles.StochasticFragment.in_stochastic_object","title":"<code>in_stochastic_object: bool</code>  <code>property</code>","text":"<p>returns that if on the tree up to the root there is a stochastic object parent</p>"},{"location":"reference/data_structure/Stochastic_fragment/#bigsmiles.data_structures.bigsmiles.StochasticFragment.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Stochastic_fragment/#bigsmiles.data_structures.bigsmiles.StochasticFragment.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is determining all nodes and rings are equal</p>"},{"location":"reference/data_structure/Stochastic_object/","title":"Stochastic Object","text":""},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject","title":"<code>bigsmiles.data_structures.bigsmiles.StochasticObject(id_, parent, **kwargs)</code>","text":"<p>this class is represents a stochastic object</p> PARAMETER DESCRIPTION <code>id_</code> <p>id of bond (id is limited to bonds). Range: [1, inf]</p> <p> TYPE: <code>int</code> </p> <code>parent</code> <p>the owner of the atom</p> <p> TYPE: <code>BigSMILES | StochasticFragment | Branch</code> </p> <code>kwargs</code> <p>any additional keyword arguments are accepted and set as additional attributes</p> <p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.aromatic","title":"<code>aromatic: bool</code>  <code>property</code>","text":"<p>limited accuracy</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.bond_left","title":"<code>bond_left: Bond | None</code>  <code>property</code> <code>writable</code>","text":"<p>bond leaving the left of the stochastic object</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.bond_right","title":"<code>bond_right: Bond | None</code>  <code>property</code> <code>writable</code>","text":"<p>bond leaving the right of the stochastic object</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.bonds","title":"<code>bonds: list[Bond]</code>  <code>property</code>","text":"<p>bonds entering the left and right</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.details","title":"<code>details: str</code>  <code>property</code>","text":"<p>long string representation</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.implicit_endgroups","title":"<code>implicit_endgroups: bool</code>  <code>property</code>","text":"<p>Returns true if one or more are implicit</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.in_stochastic_object","title":"<code>in_stochastic_object: bool</code>  <code>property</code>","text":"<p>returns True as it is the stochastic object</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.root","title":"<code>root: BigSMILES</code>  <code>property</code>","text":"<p>the owner at the top of the parent tree</p>"},{"location":"reference/data_structure/Stochastic_object/#bigsmiles.data_structures.bigsmiles.StochasticObject.__eq__","title":"<code>__eq__(other)</code>","text":"<p>equality is determining all nodes and bonding descriptors are equal</p>"},{"location":"reference/data_structure/overview/","title":"Overview","text":"<p>The BigSMILES will be parsed into an abstract syntax tree. There are 3 classes of nodes:</p> <ul> <li>root node: <code>BigSMILES</code></li> <li>intermediate nodes: <code>StochasticObject</code>, <code>StochasticFragment</code>, <code>Branch</code></li> <li>leaf nodes: <code>BondDescriptorAtom</code>, <code>Atom</code>, <code>Bond</code></li> </ul> <p>BigSMILE objects (<code>Atom</code>, <code>Bond</code>, <code>BondingDescriptor</code>, <code>Branch</code>, <code>StochasticFragment</code>, <code>StochasticObject</code>, <code>BigSMILES</code>)  only holds data. </p> <p>Info</p> <p>Creation of these objects are handled by the 'Constructor' methods.</p> <p> The figure shows the data objects and links to other data objects.  The arrows point from 'parent' objects to 'child' objects. Meaning <code>Reaction</code> --&gt; <code>BigSMILES</code> means that you will  find attributes in <code>Reaction</code> that are <code>BigSMILES</code> objects. <p></p> classDiagram      class Reaction {         reactants: [BigSMILES]         agents: [BigSMILES]         products: [BigSMILES]     }      class BigSMILES {         nodes: [Atom, Bond, Branch, StochasticObject]         atoms: [Atom]         bonds: [Bond]         rings: [Bond]     }       class StochasticObject {         nodes: [StochasticFragment]         bond_left: Bond         bond_right: Bond         bond_descriptors: BondDescriptor     }       class StochasticFragment {         nodes: [Atom, Bond, Branch, StochasticObject]         rings: [Bond]     }       class Branch {         nodes: [Atom, Bond, Branch, StochasticObject]     }       class BondDescriptorAtom {         BondDescriptor: descriptor         Bond: bond     }       class BondDescriptor {         instances: list[BondDescriptorAtom]      }       class Bond {         atom1: Atom         atom2 Atom     }      class Atom {         bonds: list[Bond]:      }      Reaction --|&gt; BigSMILES     BigSMILES --|&gt; Atom     BigSMILES --|&gt; Bond     BigSMILES --|&gt; Branch     BigSMILES --|&gt; StochasticObject     StochasticObject --|&gt; StochasticFragment     StochasticObject --|&gt; BondDescriptor     StochasticFragment --|&gt; BondDescriptorAtom     BondDescriptor --|&gt; BondDescriptorAtom     StochasticFragment --|&gt; Atom     StochasticFragment --|&gt; Bond     StochasticFragment --|&gt; Branch     StochasticFragment --|&gt; StochasticObject     Branch --|&gt; BondDescriptorAtom     Branch --|&gt; StochasticObject     Branch --|&gt; Bond     Branch --|&gt; Atom"},{"location":"reference/methods/overview/","title":"Methods","text":""},{"location":"reference/methods/parse_tree/","title":"parse_tree","text":""},{"location":"reference/methods/parse_tree/#bigsmiles.methods.display_methods.tree_to_string.tree_to_string","title":"<code>bigsmiles.methods.display_methods.tree_to_string.tree_to_string(bigsmiles_, show_object_labels=True, print_repr=False)</code>","text":"<p>Creates a string representation of a tree for printing.</p> PARAMETER DESCRIPTION <code>bigsmiles_</code> <p>Root node</p> <p> TYPE: <code>BigSMILES</code> </p> <code>show_object_labels</code> <p>show object labels</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>print_repr</code> <p>print str or print repr of objects True: repr() is called False: str() is called</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>text</code> <p>String with the structure of a tree.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/methods/parse_tree/#example","title":"Example","text":""},{"location":"reference/methods/parse_tree/#code","title":"Code:","text":"<pre><code>import bigsmiles\nimport bigsmiles.methods as bs_methods\npolymer_string = \"CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\"\npolymer = bigsmiles.BigSMILES(polymer_string)\ntext = bs_methods.print_tree(polymer)\nprint(text)\n</code></pre>"},{"location":"reference/methods/parse_tree/#output","title":"Output:","text":"<pre><code>BigSMILES: CC{[&gt;][&lt;]CC(C)[&gt;][&lt;]}CC(C)=C\n\u251c\u2500\u2500 Atom: C\n\u251c\u2500\u2500 Bond: \n\u251c\u2500\u2500 Atom: C\n\u251c\u2500\u2500 Bond: \n\u251c\u2500\u2500 StochasticObject: {[&gt;][&lt;]CC(C)[&gt;][&lt;]}\n\u2502    \u2514\u2500\u2500 StochasticFragment: [&lt;]CC(C)[&gt;]\n\u2502        \u251c\u2500\u2500 BondDescriptorAtom: [&lt;]\n\u2502        \u251c\u2500\u2500 Bond: \n\u2502        \u251c\u2500\u2500 Atom: C\n\u2502        \u251c\u2500\u2500 Bond: \n\u2502        \u251c\u2500\u2500 Atom: C\n\u2502        \u251c\u2500\u2500 Branch: (C)\n\u2502        \u2502    \u251c\u2500\u2500 Bond: \n\u2502        \u2502    \u2514\u2500\u2500 Atom: C\n\u2502        \u251c\u2500\u2500 Bond: \n\u2502        \u2514\u2500\u2500 BondDescriptorAtom: [&gt;]\n\u251c\u2500\u2500 Bond: \n\u251c\u2500\u2500 Atom: C\n\u251c\u2500\u2500 Bond: \n\u251c\u2500\u2500 Atom: C\n\u251c\u2500\u2500 Branch: (C)\n\u2502    \u251c\u2500\u2500 Bond: \n\u2502    \u2514\u2500\u2500 Atom: C\n\u251c\u2500\u2500 Bond: =\n\u2514\u2500\u2500 Atom: C\n</code></pre>"},{"location":"reference/methods/parse_tree/#configuration","title":"Configuration","text":""},{"location":"reference/methods/parse_tree/#bigsmiles.methods.display_methods.tree_to_string.TreeConfig","title":"<code>bigsmiles.methods.display_methods.tree_to_string.TreeConfig</code>","text":"<p>this class can be used to configure the tree parsing output</p> PARAMETER DESCRIPTION <code>tree_symbol_options</code> <p>symbols to build the tree. various ascii options are available</p> <p> </p> <code>symbols</code> <p>select from 'tree_symbol_options' what ascii symbols you want to use</p> <p> </p>"},{"location":"reference/methods/parse_tree/#bigsmiles.methods.display_methods.tree_to_string.TreeConfig--notes","title":"Notes","text":"<ul> <li>color can be added to the output with through the main configuration class</li> </ul>"},{"location":"tutorials/tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a problem-oriented approach or cookbook recipes. </p>"}]}